/*
 * This file is generated by jOOQ.
 */
package com.jooq.example.domain.tables.records;


import com.jooq.example.domain.tables.EmployeePrivileges;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeePrivilegesRecord extends UpdatableRecordImpl<EmployeePrivilegesRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = -501658169;

    /**
     * Setter for <code>northwind.employee_privileges.employee_id</code>.
     */
    public void setEmployeeId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>northwind.employee_privileges.employee_id</code>.
     */
    public Integer getEmployeeId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>northwind.employee_privileges.privilege_id</code>.
     */
    public void setPrivilegeId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>northwind.employee_privileges.privilege_id</code>.
     */
    public Integer getPrivilegeId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return EmployeePrivileges.EMPLOYEE_PRIVILEGES.EMPLOYEE_ID;
    }

    @Override
    public Field<Integer> field2() {
        return EmployeePrivileges.EMPLOYEE_PRIVILEGES.PRIVILEGE_ID;
    }

    @Override
    public Integer component1() {
        return getEmployeeId();
    }

    @Override
    public Integer component2() {
        return getPrivilegeId();
    }

    @Override
    public Integer value1() {
        return getEmployeeId();
    }

    @Override
    public Integer value2() {
        return getPrivilegeId();
    }

    @Override
    public EmployeePrivilegesRecord value1(Integer value) {
        setEmployeeId(value);
        return this;
    }

    @Override
    public EmployeePrivilegesRecord value2(Integer value) {
        setPrivilegeId(value);
        return this;
    }

    @Override
    public EmployeePrivilegesRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EmployeePrivilegesRecord
     */
    public EmployeePrivilegesRecord() {
        super(EmployeePrivileges.EMPLOYEE_PRIVILEGES);
    }

    /**
     * Create a detached, initialised EmployeePrivilegesRecord
     */
    public EmployeePrivilegesRecord(Integer employeeId, Integer privilegeId) {
        super(EmployeePrivileges.EMPLOYEE_PRIVILEGES);

        set(0, employeeId);
        set(1, privilegeId);
    }
}
