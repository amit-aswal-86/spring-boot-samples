/*
 * This file is generated by jOOQ.
 */
package com.jooq.example.domain.tables;


import com.jooq.example.domain.Indexes;
import com.jooq.example.domain.Keys;
import com.jooq.example.domain.Northwind;
import com.jooq.example.domain.tables.records.EmployeesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employees extends TableImpl<EmployeesRecord> {

    private static final long serialVersionUID = 1658420614;

    /**
     * The reference instance of <code>northwind.employees</code>
     */
    public static final Employees EMPLOYEES = new Employees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeesRecord> getRecordType() {
        return EmployeesRecord.class;
    }

    /**
     * The column <code>northwind.employees.id</code>.
     */
    public final TableField<EmployeesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>northwind.employees.company</code>.
     */
    public final TableField<EmployeesRecord, String> COMPANY = createField(DSL.name("company"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.employees.last_name</code>.
     */
    public final TableField<EmployeesRecord, String> LAST_NAME = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.employees.first_name</code>.
     */
    public final TableField<EmployeesRecord, String> FIRST_NAME = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.employees.email_address</code>.
     */
    public final TableField<EmployeesRecord, String> EMAIL_ADDRESS = createField(DSL.name("email_address"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.employees.job_title</code>.
     */
    public final TableField<EmployeesRecord, String> JOB_TITLE = createField(DSL.name("job_title"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.employees.business_phone</code>.
     */
    public final TableField<EmployeesRecord, String> BUSINESS_PHONE = createField(DSL.name("business_phone"), org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>northwind.employees.home_phone</code>.
     */
    public final TableField<EmployeesRecord, String> HOME_PHONE = createField(DSL.name("home_phone"), org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>northwind.employees.mobile_phone</code>.
     */
    public final TableField<EmployeesRecord, String> MOBILE_PHONE = createField(DSL.name("mobile_phone"), org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>northwind.employees.fax_number</code>.
     */
    public final TableField<EmployeesRecord, String> FAX_NUMBER = createField(DSL.name("fax_number"), org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>northwind.employees.address</code>.
     */
    public final TableField<EmployeesRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>northwind.employees.city</code>.
     */
    public final TableField<EmployeesRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.employees.state_province</code>.
     */
    public final TableField<EmployeesRecord, String> STATE_PROVINCE = createField(DSL.name("state_province"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.employees.zip_postal_code</code>.
     */
    public final TableField<EmployeesRecord, String> ZIP_POSTAL_CODE = createField(DSL.name("zip_postal_code"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>northwind.employees.country_region</code>.
     */
    public final TableField<EmployeesRecord, String> COUNTRY_REGION = createField(DSL.name("country_region"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.employees.web_page</code>.
     */
    public final TableField<EmployeesRecord, String> WEB_PAGE = createField(DSL.name("web_page"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>northwind.employees.notes</code>.
     */
    public final TableField<EmployeesRecord, String> NOTES = createField(DSL.name("notes"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>northwind.employees.attachments</code>.
     */
    public final TableField<EmployeesRecord, byte[]> ATTACHMENTS = createField(DSL.name("attachments"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>northwind.employees</code> table reference
     */
    public Employees() {
        this(DSL.name("employees"), null);
    }

    /**
     * Create an aliased <code>northwind.employees</code> table reference
     */
    public Employees(String alias) {
        this(DSL.name(alias), EMPLOYEES);
    }

    /**
     * Create an aliased <code>northwind.employees</code> table reference
     */
    public Employees(Name alias) {
        this(alias, EMPLOYEES);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Employees(Table<O> child, ForeignKey<O, EmployeesRecord> key) {
        super(child, key, EMPLOYEES);
    }

    @Override
    public Schema getSchema() {
        return Northwind.NORTHWIND;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMPLOYEES_CITY, Indexes.EMPLOYEES_COMPANY, Indexes.EMPLOYEES_FIRST_NAME, Indexes.EMPLOYEES_LAST_NAME, Indexes.EMPLOYEES_PRIMARY, Indexes.EMPLOYEES_STATE_PROVINCE, Indexes.EMPLOYEES_ZIP_POSTAL_CODE);
    }

    @Override
    public Identity<EmployeesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EMPLOYEES;
    }

    @Override
    public UniqueKey<EmployeesRecord> getPrimaryKey() {
        return Keys.KEY_EMPLOYEES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EmployeesRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeesRecord>>asList(Keys.KEY_EMPLOYEES_PRIMARY);
    }

    @Override
    public Employees as(String alias) {
        return new Employees(DSL.name(alias), this);
    }

    @Override
    public Employees as(Name alias) {
        return new Employees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(String name) {
        return new Employees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(Name name) {
        return new Employees(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Integer, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, byte[]> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
