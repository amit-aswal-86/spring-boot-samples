/*
 * This file is generated by jOOQ.
 */
package com.jooq.example.domain.tables;


import com.jooq.example.domain.Indexes;
import com.jooq.example.domain.Keys;
import com.jooq.example.domain.Northwind;
import com.jooq.example.domain.tables.records.OrdersRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 599567073;

    /**
     * The reference instance of <code>northwind.orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>northwind.orders.id</code>.
     */
    public final TableField<OrdersRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>northwind.orders.employee_id</code>.
     */
    public final TableField<OrdersRecord, Integer> EMPLOYEE_ID = createField(DSL.name("employee_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>northwind.orders.customer_id</code>.
     */
    public final TableField<OrdersRecord, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>northwind.orders.order_date</code>.
     */
    public final TableField<OrdersRecord, Timestamp> ORDER_DATE = createField(DSL.name("order_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>northwind.orders.shipped_date</code>.
     */
    public final TableField<OrdersRecord, Timestamp> SHIPPED_DATE = createField(DSL.name("shipped_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>northwind.orders.shipper_id</code>.
     */
    public final TableField<OrdersRecord, Integer> SHIPPER_ID = createField(DSL.name("shipper_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>northwind.orders.ship_name</code>.
     */
    public final TableField<OrdersRecord, String> SHIP_NAME = createField(DSL.name("ship_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.orders.ship_address</code>.
     */
    public final TableField<OrdersRecord, String> SHIP_ADDRESS = createField(DSL.name("ship_address"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>northwind.orders.ship_city</code>.
     */
    public final TableField<OrdersRecord, String> SHIP_CITY = createField(DSL.name("ship_city"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.orders.ship_state_province</code>.
     */
    public final TableField<OrdersRecord, String> SHIP_STATE_PROVINCE = createField(DSL.name("ship_state_province"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.orders.ship_zip_postal_code</code>.
     */
    public final TableField<OrdersRecord, String> SHIP_ZIP_POSTAL_CODE = createField(DSL.name("ship_zip_postal_code"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.orders.ship_country_region</code>.
     */
    public final TableField<OrdersRecord, String> SHIP_COUNTRY_REGION = createField(DSL.name("ship_country_region"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.orders.shipping_fee</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> SHIPPING_FEE = createField(DSL.name("shipping_fee"), org.jooq.impl.SQLDataType.DECIMAL(19, 4).defaultValue(org.jooq.impl.DSL.inline("0.0000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>northwind.orders.taxes</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> TAXES = createField(DSL.name("taxes"), org.jooq.impl.SQLDataType.DECIMAL(19, 4).defaultValue(org.jooq.impl.DSL.inline("0.0000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>northwind.orders.payment_type</code>.
     */
    public final TableField<OrdersRecord, String> PAYMENT_TYPE = createField(DSL.name("payment_type"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.orders.paid_date</code>.
     */
    public final TableField<OrdersRecord, Timestamp> PAID_DATE = createField(DSL.name("paid_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>northwind.orders.notes</code>.
     */
    public final TableField<OrdersRecord, String> NOTES = createField(DSL.name("notes"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>northwind.orders.tax_rate</code>.
     */
    public final TableField<OrdersRecord, Double> TAX_RATE = createField(DSL.name("tax_rate"), org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>northwind.orders.tax_status_id</code>.
     */
    public final TableField<OrdersRecord, Byte> TAX_STATUS_ID = createField(DSL.name("tax_status_id"), org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>northwind.orders.status_id</code>.
     */
    public final TableField<OrdersRecord, Byte> STATUS_ID = createField(DSL.name("status_id"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>northwind.orders</code> table reference
     */
    public Orders() {
        this(DSL.name("orders"), null);
    }

    /**
     * Create an aliased <code>northwind.orders</code> table reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>northwind.orders</code> table reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Orders(Table<O> child, ForeignKey<O, OrdersRecord> key) {
        super(child, key, ORDERS);
    }

    @Override
    public Schema getSchema() {
        return Northwind.NORTHWIND;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDERS_CUSTOMER_ID, Indexes.ORDERS_CUSTOMER_ID_2, Indexes.ORDERS_EMPLOYEE_ID, Indexes.ORDERS_EMPLOYEE_ID_2, Indexes.ORDERS_FK_ORDERS_ORDERS_STATUS1, Indexes.ORDERS_ID, Indexes.ORDERS_ID_2, Indexes.ORDERS_ID_3, Indexes.ORDERS_PRIMARY, Indexes.ORDERS_SHIPPER_ID, Indexes.ORDERS_SHIPPER_ID_2, Indexes.ORDERS_SHIP_ZIP_POSTAL_CODE, Indexes.ORDERS_TAX_STATUS);
    }

    @Override
    public Identity<OrdersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORDERS;
    }

    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.KEY_ORDERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersRecord>>asList(Keys.KEY_ORDERS_PRIMARY);
    }

    @Override
    public List<ForeignKey<OrdersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrdersRecord, ?>>asList(Keys.FK_ORDERS_EMPLOYEES1, Keys.FK_ORDERS_CUSTOMERS, Keys.FK_ORDERS_SHIPPERS1, Keys.FK_ORDERS_ORDERS_TAX_STATUS1, Keys.FK_ORDERS_ORDERS_STATUS1);
    }

    public Employees employees() {
        return new Employees(this, Keys.FK_ORDERS_EMPLOYEES1);
    }

    public Customers customers() {
        return new Customers(this, Keys.FK_ORDERS_CUSTOMERS);
    }

    public Shippers shippers() {
        return new Shippers(this, Keys.FK_ORDERS_SHIPPERS1);
    }

    public OrdersTaxStatus ordersTaxStatus() {
        return new OrdersTaxStatus(this, Keys.FK_ORDERS_ORDERS_TAX_STATUS1);
    }

    public OrdersStatus ordersStatus() {
        return new OrdersStatus(this, Keys.FK_ORDERS_ORDERS_STATUS1);
    }

    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Integer, Integer, Integer, Timestamp, Timestamp, Integer, String, String, String, String, String, String, BigDecimal, BigDecimal, String, Timestamp, String, Double, Byte, Byte> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
