/*
 * This file is generated by jOOQ.
 */
package com.jooq.example.domain.tables.records;


import com.jooq.example.domain.tables.OrdersTaxStatus;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersTaxStatusRecord extends UpdatableRecordImpl<OrdersTaxStatusRecord> implements Record2<Byte, String> {

    private static final long serialVersionUID = -720434292;

    /**
     * Setter for <code>northwind.orders_tax_status.id</code>.
     */
    public void setId(Byte value) {
        set(0, value);
    }

    /**
     * Getter for <code>northwind.orders_tax_status.id</code>.
     */
    public Byte getId() {
        return (Byte) get(0);
    }

    /**
     * Setter for <code>northwind.orders_tax_status.tax_status_name</code>.
     */
    public void setTaxStatusName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>northwind.orders_tax_status.tax_status_name</code>.
     */
    public String getTaxStatusName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Byte> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Byte, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Byte, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Byte> field1() {
        return OrdersTaxStatus.ORDERS_TAX_STATUS.ID;
    }

    @Override
    public Field<String> field2() {
        return OrdersTaxStatus.ORDERS_TAX_STATUS.TAX_STATUS_NAME;
    }

    @Override
    public Byte component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getTaxStatusName();
    }

    @Override
    public Byte value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getTaxStatusName();
    }

    @Override
    public OrdersTaxStatusRecord value1(Byte value) {
        setId(value);
        return this;
    }

    @Override
    public OrdersTaxStatusRecord value2(String value) {
        setTaxStatusName(value);
        return this;
    }

    @Override
    public OrdersTaxStatusRecord values(Byte value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrdersTaxStatusRecord
     */
    public OrdersTaxStatusRecord() {
        super(OrdersTaxStatus.ORDERS_TAX_STATUS);
    }

    /**
     * Create a detached, initialised OrdersTaxStatusRecord
     */
    public OrdersTaxStatusRecord(Byte id, String taxStatusName) {
        super(OrdersTaxStatus.ORDERS_TAX_STATUS);

        set(0, id);
        set(1, taxStatusName);
    }
}
