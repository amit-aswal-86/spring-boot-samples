/*
 * This file is generated by jOOQ.
 */
package com.jooq.example.domain.tables;


import com.jooq.example.domain.Indexes;
import com.jooq.example.domain.Keys;
import com.jooq.example.domain.Northwind;
import com.jooq.example.domain.tables.records.OrdersStatusRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersStatus extends TableImpl<OrdersStatusRecord> {

    private static final long serialVersionUID = 724265615;

    /**
     * The reference instance of <code>northwind.orders_status</code>
     */
    public static final OrdersStatus ORDERS_STATUS = new OrdersStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersStatusRecord> getRecordType() {
        return OrdersStatusRecord.class;
    }

    /**
     * The column <code>northwind.orders_status.id</code>.
     */
    public final TableField<OrdersStatusRecord, Byte> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>northwind.orders_status.status_name</code>.
     */
    public final TableField<OrdersStatusRecord, String> STATUS_NAME = createField(DSL.name("status_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>northwind.orders_status</code> table reference
     */
    public OrdersStatus() {
        this(DSL.name("orders_status"), null);
    }

    /**
     * Create an aliased <code>northwind.orders_status</code> table reference
     */
    public OrdersStatus(String alias) {
        this(DSL.name(alias), ORDERS_STATUS);
    }

    /**
     * Create an aliased <code>northwind.orders_status</code> table reference
     */
    public OrdersStatus(Name alias) {
        this(alias, ORDERS_STATUS);
    }

    private OrdersStatus(Name alias, Table<OrdersStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrdersStatus(Name alias, Table<OrdersStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OrdersStatus(Table<O> child, ForeignKey<O, OrdersStatusRecord> key) {
        super(child, key, ORDERS_STATUS);
    }

    @Override
    public Schema getSchema() {
        return Northwind.NORTHWIND;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDERS_STATUS_PRIMARY);
    }

    @Override
    public UniqueKey<OrdersStatusRecord> getPrimaryKey() {
        return Keys.KEY_ORDERS_STATUS_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrdersStatusRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersStatusRecord>>asList(Keys.KEY_ORDERS_STATUS_PRIMARY);
    }

    @Override
    public OrdersStatus as(String alias) {
        return new OrdersStatus(DSL.name(alias), this);
    }

    @Override
    public OrdersStatus as(Name alias) {
        return new OrdersStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersStatus rename(String name) {
        return new OrdersStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersStatus rename(Name name) {
        return new OrdersStatus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Byte, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
