/*
 * This file is generated by jOOQ.
 */
package com.jooq.example.domain.tables;


import com.jooq.example.domain.Indexes;
import com.jooq.example.domain.Keys;
import com.jooq.example.domain.Northwind;
import com.jooq.example.domain.tables.records.PurchaseOrdersRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PurchaseOrders extends TableImpl<PurchaseOrdersRecord> {

    private static final long serialVersionUID = -1839800708;

    /**
     * The reference instance of <code>northwind.purchase_orders</code>
     */
    public static final PurchaseOrders PURCHASE_ORDERS = new PurchaseOrders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchaseOrdersRecord> getRecordType() {
        return PurchaseOrdersRecord.class;
    }

    /**
     * The column <code>northwind.purchase_orders.id</code>.
     */
    public final TableField<PurchaseOrdersRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>northwind.purchase_orders.supplier_id</code>.
     */
    public final TableField<PurchaseOrdersRecord, Integer> SUPPLIER_ID = createField(DSL.name("supplier_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>northwind.purchase_orders.created_by</code>.
     */
    public final TableField<PurchaseOrdersRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>northwind.purchase_orders.submitted_date</code>.
     */
    public final TableField<PurchaseOrdersRecord, Timestamp> SUBMITTED_DATE = createField(DSL.name("submitted_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>northwind.purchase_orders.creation_date</code>.
     */
    public final TableField<PurchaseOrdersRecord, Timestamp> CREATION_DATE = createField(DSL.name("creation_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>northwind.purchase_orders.status_id</code>.
     */
    public final TableField<PurchaseOrdersRecord, Integer> STATUS_ID = createField(DSL.name("status_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>northwind.purchase_orders.expected_date</code>.
     */
    public final TableField<PurchaseOrdersRecord, Timestamp> EXPECTED_DATE = createField(DSL.name("expected_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>northwind.purchase_orders.shipping_fee</code>.
     */
    public final TableField<PurchaseOrdersRecord, BigDecimal> SHIPPING_FEE = createField(DSL.name("shipping_fee"), org.jooq.impl.SQLDataType.DECIMAL(19, 4).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.0000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>northwind.purchase_orders.taxes</code>.
     */
    public final TableField<PurchaseOrdersRecord, BigDecimal> TAXES = createField(DSL.name("taxes"), org.jooq.impl.SQLDataType.DECIMAL(19, 4).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.0000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>northwind.purchase_orders.payment_date</code>.
     */
    public final TableField<PurchaseOrdersRecord, Timestamp> PAYMENT_DATE = createField(DSL.name("payment_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>northwind.purchase_orders.payment_amount</code>.
     */
    public final TableField<PurchaseOrdersRecord, BigDecimal> PAYMENT_AMOUNT = createField(DSL.name("payment_amount"), org.jooq.impl.SQLDataType.DECIMAL(19, 4).defaultValue(org.jooq.impl.DSL.inline("0.0000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>northwind.purchase_orders.payment_method</code>.
     */
    public final TableField<PurchaseOrdersRecord, String> PAYMENT_METHOD = createField(DSL.name("payment_method"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.purchase_orders.notes</code>.
     */
    public final TableField<PurchaseOrdersRecord, String> NOTES = createField(DSL.name("notes"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>northwind.purchase_orders.approved_by</code>.
     */
    public final TableField<PurchaseOrdersRecord, Integer> APPROVED_BY = createField(DSL.name("approved_by"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>northwind.purchase_orders.approved_date</code>.
     */
    public final TableField<PurchaseOrdersRecord, Timestamp> APPROVED_DATE = createField(DSL.name("approved_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>northwind.purchase_orders.submitted_by</code>.
     */
    public final TableField<PurchaseOrdersRecord, Integer> SUBMITTED_BY = createField(DSL.name("submitted_by"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>northwind.purchase_orders</code> table reference
     */
    public PurchaseOrders() {
        this(DSL.name("purchase_orders"), null);
    }

    /**
     * Create an aliased <code>northwind.purchase_orders</code> table reference
     */
    public PurchaseOrders(String alias) {
        this(DSL.name(alias), PURCHASE_ORDERS);
    }

    /**
     * Create an aliased <code>northwind.purchase_orders</code> table reference
     */
    public PurchaseOrders(Name alias) {
        this(alias, PURCHASE_ORDERS);
    }

    private PurchaseOrders(Name alias, Table<PurchaseOrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private PurchaseOrders(Name alias, Table<PurchaseOrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PurchaseOrders(Table<O> child, ForeignKey<O, PurchaseOrdersRecord> key) {
        super(child, key, PURCHASE_ORDERS);
    }

    @Override
    public Schema getSchema() {
        return Northwind.NORTHWIND;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PURCHASE_ORDERS_CREATED_BY, Indexes.PURCHASE_ORDERS_ID, Indexes.PURCHASE_ORDERS_ID_2, Indexes.PURCHASE_ORDERS_PRIMARY, Indexes.PURCHASE_ORDERS_STATUS_ID, Indexes.PURCHASE_ORDERS_SUPPLIER_ID, Indexes.PURCHASE_ORDERS_SUPPLIER_ID_2);
    }

    @Override
    public Identity<PurchaseOrdersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PURCHASE_ORDERS;
    }

    @Override
    public UniqueKey<PurchaseOrdersRecord> getPrimaryKey() {
        return Keys.KEY_PURCHASE_ORDERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PurchaseOrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<PurchaseOrdersRecord>>asList(Keys.KEY_PURCHASE_ORDERS_PRIMARY, Keys.KEY_PURCHASE_ORDERS_ID);
    }

    @Override
    public List<ForeignKey<PurchaseOrdersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PurchaseOrdersRecord, ?>>asList(Keys.FK_PURCHASE_ORDERS_SUPPLIERS1, Keys.FK_PURCHASE_ORDERS_EMPLOYEES1, Keys.FK_PURCHASE_ORDERS_PURCHASE_ORDER_STATUS1);
    }

    public Suppliers suppliers() {
        return new Suppliers(this, Keys.FK_PURCHASE_ORDERS_SUPPLIERS1);
    }

    public Employees employees() {
        return new Employees(this, Keys.FK_PURCHASE_ORDERS_EMPLOYEES1);
    }

    public PurchaseOrderStatus purchaseOrderStatus() {
        return new PurchaseOrderStatus(this, Keys.FK_PURCHASE_ORDERS_PURCHASE_ORDER_STATUS1);
    }

    @Override
    public PurchaseOrders as(String alias) {
        return new PurchaseOrders(DSL.name(alias), this);
    }

    @Override
    public PurchaseOrders as(Name alias) {
        return new PurchaseOrders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchaseOrders rename(String name) {
        return new PurchaseOrders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchaseOrders rename(Name name) {
        return new PurchaseOrders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Integer, Integer, Integer, Timestamp, Timestamp, Integer, Timestamp, BigDecimal, BigDecimal, Timestamp, BigDecimal, String, String, Integer, Timestamp, Integer> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
