/*
 * This file is generated by jOOQ.
 */
package com.jooq.example.domain.tables;


import com.jooq.example.domain.Indexes;
import com.jooq.example.domain.Keys;
import com.jooq.example.domain.Northwind;
import com.jooq.example.domain.tables.records.PurchaseOrderDetailsRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PurchaseOrderDetails extends TableImpl<PurchaseOrderDetailsRecord> {

    private static final long serialVersionUID = -340025608;

    /**
     * The reference instance of <code>northwind.purchase_order_details</code>
     */
    public static final PurchaseOrderDetails PURCHASE_ORDER_DETAILS = new PurchaseOrderDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchaseOrderDetailsRecord> getRecordType() {
        return PurchaseOrderDetailsRecord.class;
    }

    /**
     * The column <code>northwind.purchase_order_details.id</code>.
     */
    public final TableField<PurchaseOrderDetailsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>northwind.purchase_order_details.purchase_order_id</code>.
     */
    public final TableField<PurchaseOrderDetailsRecord, Integer> PURCHASE_ORDER_ID = createField(DSL.name("purchase_order_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>northwind.purchase_order_details.product_id</code>.
     */
    public final TableField<PurchaseOrderDetailsRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>northwind.purchase_order_details.quantity</code>.
     */
    public final TableField<PurchaseOrderDetailsRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), org.jooq.impl.SQLDataType.DECIMAL(18, 4).nullable(false), this, "");

    /**
     * The column <code>northwind.purchase_order_details.unit_cost</code>.
     */
    public final TableField<PurchaseOrderDetailsRecord, BigDecimal> UNIT_COST = createField(DSL.name("unit_cost"), org.jooq.impl.SQLDataType.DECIMAL(19, 4).nullable(false), this, "");

    /**
     * The column <code>northwind.purchase_order_details.date_received</code>.
     */
    public final TableField<PurchaseOrderDetailsRecord, Timestamp> DATE_RECEIVED = createField(DSL.name("date_received"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>northwind.purchase_order_details.posted_to_inventory</code>.
     */
    public final TableField<PurchaseOrderDetailsRecord, Byte> POSTED_TO_INVENTORY = createField(DSL.name("posted_to_inventory"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>northwind.purchase_order_details.inventory_id</code>.
     */
    public final TableField<PurchaseOrderDetailsRecord, Integer> INVENTORY_ID = createField(DSL.name("inventory_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>northwind.purchase_order_details</code> table reference
     */
    public PurchaseOrderDetails() {
        this(DSL.name("purchase_order_details"), null);
    }

    /**
     * Create an aliased <code>northwind.purchase_order_details</code> table reference
     */
    public PurchaseOrderDetails(String alias) {
        this(DSL.name(alias), PURCHASE_ORDER_DETAILS);
    }

    /**
     * Create an aliased <code>northwind.purchase_order_details</code> table reference
     */
    public PurchaseOrderDetails(Name alias) {
        this(alias, PURCHASE_ORDER_DETAILS);
    }

    private PurchaseOrderDetails(Name alias, Table<PurchaseOrderDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PurchaseOrderDetails(Name alias, Table<PurchaseOrderDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PurchaseOrderDetails(Table<O> child, ForeignKey<O, PurchaseOrderDetailsRecord> key) {
        super(child, key, PURCHASE_ORDER_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return Northwind.NORTHWIND;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PURCHASE_ORDER_DETAILS_ID, Indexes.PURCHASE_ORDER_DETAILS_INVENTORY_ID, Indexes.PURCHASE_ORDER_DETAILS_INVENTORY_ID_2, Indexes.PURCHASE_ORDER_DETAILS_PRIMARY, Indexes.PURCHASE_ORDER_DETAILS_PRODUCT_ID, Indexes.PURCHASE_ORDER_DETAILS_PRODUCT_ID_2, Indexes.PURCHASE_ORDER_DETAILS_PURCHASE_ORDER_ID, Indexes.PURCHASE_ORDER_DETAILS_PURCHASE_ORDER_ID_2);
    }

    @Override
    public Identity<PurchaseOrderDetailsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PURCHASE_ORDER_DETAILS;
    }

    @Override
    public UniqueKey<PurchaseOrderDetailsRecord> getPrimaryKey() {
        return Keys.KEY_PURCHASE_ORDER_DETAILS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PurchaseOrderDetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<PurchaseOrderDetailsRecord>>asList(Keys.KEY_PURCHASE_ORDER_DETAILS_PRIMARY);
    }

    @Override
    public List<ForeignKey<PurchaseOrderDetailsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PurchaseOrderDetailsRecord, ?>>asList(Keys.FK_PURCHASE_ORDER_DETAILS_PURCHASE_ORDERS1, Keys.FK_PURCHASE_ORDER_DETAILS_PRODUCTS1, Keys.FK_PURCHASE_ORDER_DETAILS_INVENTORY_TRANSACTIONS1);
    }

    public PurchaseOrders purchaseOrders() {
        return new PurchaseOrders(this, Keys.FK_PURCHASE_ORDER_DETAILS_PURCHASE_ORDERS1);
    }

    public Products products() {
        return new Products(this, Keys.FK_PURCHASE_ORDER_DETAILS_PRODUCTS1);
    }

    public InventoryTransactions inventoryTransactions() {
        return new InventoryTransactions(this, Keys.FK_PURCHASE_ORDER_DETAILS_INVENTORY_TRANSACTIONS1);
    }

    @Override
    public PurchaseOrderDetails as(String alias) {
        return new PurchaseOrderDetails(DSL.name(alias), this);
    }

    @Override
    public PurchaseOrderDetails as(Name alias) {
        return new PurchaseOrderDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchaseOrderDetails rename(String name) {
        return new PurchaseOrderDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchaseOrderDetails rename(Name name) {
        return new PurchaseOrderDetails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, BigDecimal, BigDecimal, Timestamp, Byte, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
