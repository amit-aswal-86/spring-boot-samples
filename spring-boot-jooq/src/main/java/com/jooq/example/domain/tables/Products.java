/*
 * This file is generated by jOOQ.
 */
package com.jooq.example.domain.tables;


import com.jooq.example.domain.Indexes;
import com.jooq.example.domain.Keys;
import com.jooq.example.domain.Northwind;
import com.jooq.example.domain.tables.records.ProductsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Products extends TableImpl<ProductsRecord> {

    private static final long serialVersionUID = 250198725;

    /**
     * The reference instance of <code>northwind.products</code>
     */
    public static final Products PRODUCTS = new Products();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsRecord> getRecordType() {
        return ProductsRecord.class;
    }

    /**
     * The column <code>northwind.products.supplier_ids</code>.
     */
    public final TableField<ProductsRecord, String> SUPPLIER_IDS = createField(DSL.name("supplier_ids"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>northwind.products.id</code>.
     */
    public final TableField<ProductsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>northwind.products.product_code</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCT_CODE = createField(DSL.name("product_code"), org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>northwind.products.product_name</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCT_NAME = createField(DSL.name("product_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.products.description</code>.
     */
    public final TableField<ProductsRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>northwind.products.standard_cost</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> STANDARD_COST = createField(DSL.name("standard_cost"), org.jooq.impl.SQLDataType.DECIMAL(19, 4).defaultValue(org.jooq.impl.DSL.inline("0.0000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>northwind.products.list_price</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> LIST_PRICE = createField(DSL.name("list_price"), org.jooq.impl.SQLDataType.DECIMAL(19, 4).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.0000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>northwind.products.reorder_level</code>.
     */
    public final TableField<ProductsRecord, Integer> REORDER_LEVEL = createField(DSL.name("reorder_level"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>northwind.products.target_level</code>.
     */
    public final TableField<ProductsRecord, Integer> TARGET_LEVEL = createField(DSL.name("target_level"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>northwind.products.quantity_per_unit</code>.
     */
    public final TableField<ProductsRecord, String> QUANTITY_PER_UNIT = createField(DSL.name("quantity_per_unit"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.products.discontinued</code>.
     */
    public final TableField<ProductsRecord, Byte> DISCONTINUED = createField(DSL.name("discontinued"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>northwind.products.minimum_reorder_quantity</code>.
     */
    public final TableField<ProductsRecord, Integer> MINIMUM_REORDER_QUANTITY = createField(DSL.name("minimum_reorder_quantity"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>northwind.products.category</code>.
     */
    public final TableField<ProductsRecord, String> CATEGORY = createField(DSL.name("category"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.products.attachments</code>.
     */
    public final TableField<ProductsRecord, byte[]> ATTACHMENTS = createField(DSL.name("attachments"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>northwind.products</code> table reference
     */
    public Products() {
        this(DSL.name("products"), null);
    }

    /**
     * Create an aliased <code>northwind.products</code> table reference
     */
    public Products(String alias) {
        this(DSL.name(alias), PRODUCTS);
    }

    /**
     * Create an aliased <code>northwind.products</code> table reference
     */
    public Products(Name alias) {
        this(alias, PRODUCTS);
    }

    private Products(Name alias, Table<ProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Products(Name alias, Table<ProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Products(Table<O> child, ForeignKey<O, ProductsRecord> key) {
        super(child, key, PRODUCTS);
    }

    @Override
    public Schema getSchema() {
        return Northwind.NORTHWIND;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUCTS_PRIMARY, Indexes.PRODUCTS_PRODUCT_CODE);
    }

    @Override
    public Identity<ProductsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUCTS;
    }

    @Override
    public UniqueKey<ProductsRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProductsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductsRecord>>asList(Keys.KEY_PRODUCTS_PRIMARY);
    }

    @Override
    public Products as(String alias) {
        return new Products(DSL.name(alias), this);
    }

    @Override
    public Products as(Name alias) {
        return new Products(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(String name) {
        return new Products(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Name name) {
        return new Products(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, Integer, String, String, String, BigDecimal, BigDecimal, Integer, Integer, String, Byte, Integer, String, byte[]> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
