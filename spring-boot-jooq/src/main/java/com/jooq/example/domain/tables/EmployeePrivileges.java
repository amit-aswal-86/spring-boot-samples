/*
 * This file is generated by jOOQ.
 */
package com.jooq.example.domain.tables;


import com.jooq.example.domain.Indexes;
import com.jooq.example.domain.Keys;
import com.jooq.example.domain.Northwind;
import com.jooq.example.domain.tables.records.EmployeePrivilegesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeePrivileges extends TableImpl<EmployeePrivilegesRecord> {

    private static final long serialVersionUID = 1146500698;

    /**
     * The reference instance of <code>northwind.employee_privileges</code>
     */
    public static final EmployeePrivileges EMPLOYEE_PRIVILEGES = new EmployeePrivileges();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeePrivilegesRecord> getRecordType() {
        return EmployeePrivilegesRecord.class;
    }

    /**
     * The column <code>northwind.employee_privileges.employee_id</code>.
     */
    public final TableField<EmployeePrivilegesRecord, Integer> EMPLOYEE_ID = createField(DSL.name("employee_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>northwind.employee_privileges.privilege_id</code>.
     */
    public final TableField<EmployeePrivilegesRecord, Integer> PRIVILEGE_ID = createField(DSL.name("privilege_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>northwind.employee_privileges</code> table reference
     */
    public EmployeePrivileges() {
        this(DSL.name("employee_privileges"), null);
    }

    /**
     * Create an aliased <code>northwind.employee_privileges</code> table reference
     */
    public EmployeePrivileges(String alias) {
        this(DSL.name(alias), EMPLOYEE_PRIVILEGES);
    }

    /**
     * Create an aliased <code>northwind.employee_privileges</code> table reference
     */
    public EmployeePrivileges(Name alias) {
        this(alias, EMPLOYEE_PRIVILEGES);
    }

    private EmployeePrivileges(Name alias, Table<EmployeePrivilegesRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeePrivileges(Name alias, Table<EmployeePrivilegesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EmployeePrivileges(Table<O> child, ForeignKey<O, EmployeePrivilegesRecord> key) {
        super(child, key, EMPLOYEE_PRIVILEGES);
    }

    @Override
    public Schema getSchema() {
        return Northwind.NORTHWIND;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMPLOYEE_PRIVILEGES_EMPLOYEE_ID, Indexes.EMPLOYEE_PRIVILEGES_PRIMARY, Indexes.EMPLOYEE_PRIVILEGES_PRIVILEGE_ID, Indexes.EMPLOYEE_PRIVILEGES_PRIVILEGE_ID_2);
    }

    @Override
    public UniqueKey<EmployeePrivilegesRecord> getPrimaryKey() {
        return Keys.KEY_EMPLOYEE_PRIVILEGES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EmployeePrivilegesRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeePrivilegesRecord>>asList(Keys.KEY_EMPLOYEE_PRIVILEGES_PRIMARY);
    }

    @Override
    public List<ForeignKey<EmployeePrivilegesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeePrivilegesRecord, ?>>asList(Keys.FK_EMPLOYEE_PRIVILEGES_EMPLOYEES1, Keys.FK_EMPLOYEE_PRIVILEGES_PRIVILEGES1);
    }

    public Employees employees() {
        return new Employees(this, Keys.FK_EMPLOYEE_PRIVILEGES_EMPLOYEES1);
    }

    public Privileges privileges() {
        return new Privileges(this, Keys.FK_EMPLOYEE_PRIVILEGES_PRIVILEGES1);
    }

    @Override
    public EmployeePrivileges as(String alias) {
        return new EmployeePrivileges(DSL.name(alias), this);
    }

    @Override
    public EmployeePrivileges as(Name alias) {
        return new EmployeePrivileges(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeePrivileges rename(String name) {
        return new EmployeePrivileges(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeePrivileges rename(Name name) {
        return new EmployeePrivileges(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
