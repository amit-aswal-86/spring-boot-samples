/*
 * This file is generated by jOOQ.
 */
package com.jooq.example.domain.tables;


import com.jooq.example.domain.Indexes;
import com.jooq.example.domain.Keys;
import com.jooq.example.domain.Northwind;
import com.jooq.example.domain.tables.records.InvoicesRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invoices extends TableImpl<InvoicesRecord> {

    private static final long serialVersionUID = -1905051019;

    /**
     * The reference instance of <code>northwind.invoices</code>
     */
    public static final Invoices INVOICES = new Invoices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvoicesRecord> getRecordType() {
        return InvoicesRecord.class;
    }

    /**
     * The column <code>northwind.invoices.id</code>.
     */
    public final TableField<InvoicesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>northwind.invoices.order_id</code>.
     */
    public final TableField<InvoicesRecord, Integer> ORDER_ID = createField(DSL.name("order_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>northwind.invoices.invoice_date</code>.
     */
    public final TableField<InvoicesRecord, Timestamp> INVOICE_DATE = createField(DSL.name("invoice_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>northwind.invoices.due_date</code>.
     */
    public final TableField<InvoicesRecord, Timestamp> DUE_DATE = createField(DSL.name("due_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>northwind.invoices.tax</code>.
     */
    public final TableField<InvoicesRecord, BigDecimal> TAX = createField(DSL.name("tax"), org.jooq.impl.SQLDataType.DECIMAL(19, 4).defaultValue(org.jooq.impl.DSL.inline("0.0000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>northwind.invoices.shipping</code>.
     */
    public final TableField<InvoicesRecord, BigDecimal> SHIPPING = createField(DSL.name("shipping"), org.jooq.impl.SQLDataType.DECIMAL(19, 4).defaultValue(org.jooq.impl.DSL.inline("0.0000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>northwind.invoices.amount_due</code>.
     */
    public final TableField<InvoicesRecord, BigDecimal> AMOUNT_DUE = createField(DSL.name("amount_due"), org.jooq.impl.SQLDataType.DECIMAL(19, 4).defaultValue(org.jooq.impl.DSL.inline("0.0000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * Create a <code>northwind.invoices</code> table reference
     */
    public Invoices() {
        this(DSL.name("invoices"), null);
    }

    /**
     * Create an aliased <code>northwind.invoices</code> table reference
     */
    public Invoices(String alias) {
        this(DSL.name(alias), INVOICES);
    }

    /**
     * Create an aliased <code>northwind.invoices</code> table reference
     */
    public Invoices(Name alias) {
        this(alias, INVOICES);
    }

    private Invoices(Name alias, Table<InvoicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Invoices(Name alias, Table<InvoicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Invoices(Table<O> child, ForeignKey<O, InvoicesRecord> key) {
        super(child, key, INVOICES);
    }

    @Override
    public Schema getSchema() {
        return Northwind.NORTHWIND;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INVOICES_FK_INVOICES_ORDERS1_IDX, Indexes.INVOICES_ID, Indexes.INVOICES_ID_2, Indexes.INVOICES_PRIMARY);
    }

    @Override
    public Identity<InvoicesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INVOICES;
    }

    @Override
    public UniqueKey<InvoicesRecord> getPrimaryKey() {
        return Keys.KEY_INVOICES_PRIMARY;
    }

    @Override
    public List<UniqueKey<InvoicesRecord>> getKeys() {
        return Arrays.<UniqueKey<InvoicesRecord>>asList(Keys.KEY_INVOICES_PRIMARY);
    }

    @Override
    public List<ForeignKey<InvoicesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InvoicesRecord, ?>>asList(Keys.FK_INVOICES_ORDERS1);
    }

    public Orders orders() {
        return new Orders(this, Keys.FK_INVOICES_ORDERS1);
    }

    @Override
    public Invoices as(String alias) {
        return new Invoices(DSL.name(alias), this);
    }

    @Override
    public Invoices as(Name alias) {
        return new Invoices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Invoices rename(String name) {
        return new Invoices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invoices rename(Name name) {
        return new Invoices(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Timestamp, Timestamp, BigDecimal, BigDecimal, BigDecimal> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
