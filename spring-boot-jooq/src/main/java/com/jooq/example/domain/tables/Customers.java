/*
 * This file is generated by jOOQ.
 */
package com.jooq.example.domain.tables;


import com.jooq.example.domain.Indexes;
import com.jooq.example.domain.Keys;
import com.jooq.example.domain.Northwind;
import com.jooq.example.domain.tables.records.CustomersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customers extends TableImpl<CustomersRecord> {

    private static final long serialVersionUID = 489121430;

    /**
     * The reference instance of <code>northwind.customers</code>
     */
    public static final Customers CUSTOMERS = new Customers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomersRecord> getRecordType() {
        return CustomersRecord.class;
    }

    /**
     * The column <code>northwind.customers.id</code>.
     */
    public final TableField<CustomersRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>northwind.customers.company</code>.
     */
    public final TableField<CustomersRecord, String> COMPANY = createField(DSL.name("company"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.customers.last_name</code>.
     */
    public final TableField<CustomersRecord, String> LAST_NAME = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.customers.first_name</code>.
     */
    public final TableField<CustomersRecord, String> FIRST_NAME = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.customers.email_address</code>.
     */
    public final TableField<CustomersRecord, String> EMAIL_ADDRESS = createField(DSL.name("email_address"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.customers.job_title</code>.
     */
    public final TableField<CustomersRecord, String> JOB_TITLE = createField(DSL.name("job_title"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.customers.business_phone</code>.
     */
    public final TableField<CustomersRecord, String> BUSINESS_PHONE = createField(DSL.name("business_phone"), org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>northwind.customers.home_phone</code>.
     */
    public final TableField<CustomersRecord, String> HOME_PHONE = createField(DSL.name("home_phone"), org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>northwind.customers.mobile_phone</code>.
     */
    public final TableField<CustomersRecord, String> MOBILE_PHONE = createField(DSL.name("mobile_phone"), org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>northwind.customers.fax_number</code>.
     */
    public final TableField<CustomersRecord, String> FAX_NUMBER = createField(DSL.name("fax_number"), org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>northwind.customers.address</code>.
     */
    public final TableField<CustomersRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>northwind.customers.city</code>.
     */
    public final TableField<CustomersRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.customers.state_province</code>.
     */
    public final TableField<CustomersRecord, String> STATE_PROVINCE = createField(DSL.name("state_province"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.customers.zip_postal_code</code>.
     */
    public final TableField<CustomersRecord, String> ZIP_POSTAL_CODE = createField(DSL.name("zip_postal_code"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>northwind.customers.country_region</code>.
     */
    public final TableField<CustomersRecord, String> COUNTRY_REGION = createField(DSL.name("country_region"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.customers.web_page</code>.
     */
    public final TableField<CustomersRecord, String> WEB_PAGE = createField(DSL.name("web_page"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>northwind.customers.notes</code>.
     */
    public final TableField<CustomersRecord, String> NOTES = createField(DSL.name("notes"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>northwind.customers.attachments</code>.
     */
    public final TableField<CustomersRecord, byte[]> ATTACHMENTS = createField(DSL.name("attachments"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>northwind.customers</code> table reference
     */
    public Customers() {
        this(DSL.name("customers"), null);
    }

    /**
     * Create an aliased <code>northwind.customers</code> table reference
     */
    public Customers(String alias) {
        this(DSL.name(alias), CUSTOMERS);
    }

    /**
     * Create an aliased <code>northwind.customers</code> table reference
     */
    public Customers(Name alias) {
        this(alias, CUSTOMERS);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Customers(Table<O> child, ForeignKey<O, CustomersRecord> key) {
        super(child, key, CUSTOMERS);
    }

    @Override
    public Schema getSchema() {
        return Northwind.NORTHWIND;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMERS_CITY, Indexes.CUSTOMERS_COMPANY, Indexes.CUSTOMERS_FIRST_NAME, Indexes.CUSTOMERS_LAST_NAME, Indexes.CUSTOMERS_PRIMARY, Indexes.CUSTOMERS_STATE_PROVINCE, Indexes.CUSTOMERS_ZIP_POSTAL_CODE);
    }

    @Override
    public Identity<CustomersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CUSTOMERS;
    }

    @Override
    public UniqueKey<CustomersRecord> getPrimaryKey() {
        return Keys.KEY_CUSTOMERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CustomersRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomersRecord>>asList(Keys.KEY_CUSTOMERS_PRIMARY);
    }

    @Override
    public Customers as(String alias) {
        return new Customers(DSL.name(alias), this);
    }

    @Override
    public Customers as(Name alias) {
        return new Customers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(String name) {
        return new Customers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(Name name) {
        return new Customers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Integer, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, byte[]> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
