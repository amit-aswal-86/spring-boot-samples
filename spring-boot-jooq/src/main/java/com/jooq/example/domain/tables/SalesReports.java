/*
 * This file is generated by jOOQ.
 */
package com.jooq.example.domain.tables;


import com.jooq.example.domain.Indexes;
import com.jooq.example.domain.Keys;
import com.jooq.example.domain.Northwind;
import com.jooq.example.domain.tables.records.SalesReportsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SalesReports extends TableImpl<SalesReportsRecord> {

    private static final long serialVersionUID = 1368275019;

    /**
     * The reference instance of <code>northwind.sales_reports</code>
     */
    public static final SalesReports SALES_REPORTS = new SalesReports();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalesReportsRecord> getRecordType() {
        return SalesReportsRecord.class;
    }

    /**
     * The column <code>northwind.sales_reports.group_by</code>.
     */
    public final TableField<SalesReportsRecord, String> GROUP_BY = createField(DSL.name("group_by"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>northwind.sales_reports.display</code>.
     */
    public final TableField<SalesReportsRecord, String> DISPLAY = createField(DSL.name("display"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.sales_reports.title</code>.
     */
    public final TableField<SalesReportsRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>northwind.sales_reports.filter_row_source</code>.
     */
    public final TableField<SalesReportsRecord, String> FILTER_ROW_SOURCE = createField(DSL.name("filter_row_source"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>northwind.sales_reports.default</code>.
     */
    public final TableField<SalesReportsRecord, Byte> DEFAULT = createField(DSL.name("default"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>northwind.sales_reports</code> table reference
     */
    public SalesReports() {
        this(DSL.name("sales_reports"), null);
    }

    /**
     * Create an aliased <code>northwind.sales_reports</code> table reference
     */
    public SalesReports(String alias) {
        this(DSL.name(alias), SALES_REPORTS);
    }

    /**
     * Create an aliased <code>northwind.sales_reports</code> table reference
     */
    public SalesReports(Name alias) {
        this(alias, SALES_REPORTS);
    }

    private SalesReports(Name alias, Table<SalesReportsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SalesReports(Name alias, Table<SalesReportsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SalesReports(Table<O> child, ForeignKey<O, SalesReportsRecord> key) {
        super(child, key, SALES_REPORTS);
    }

    @Override
    public Schema getSchema() {
        return Northwind.NORTHWIND;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SALES_REPORTS_PRIMARY);
    }

    @Override
    public UniqueKey<SalesReportsRecord> getPrimaryKey() {
        return Keys.KEY_SALES_REPORTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SalesReportsRecord>> getKeys() {
        return Arrays.<UniqueKey<SalesReportsRecord>>asList(Keys.KEY_SALES_REPORTS_PRIMARY);
    }

    @Override
    public SalesReports as(String alias) {
        return new SalesReports(DSL.name(alias), this);
    }

    @Override
    public SalesReports as(Name alias) {
        return new SalesReports(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SalesReports rename(String name) {
        return new SalesReports(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SalesReports rename(Name name) {
        return new SalesReports(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, Byte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
